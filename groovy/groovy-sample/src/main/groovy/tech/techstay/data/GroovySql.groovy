package tech.techstay.data

import groovy.sql.Sql
import org.hsqldb.jdbc.JDBCDataSource

// prepare database
def url = 'jdbc:hsqldb:mem:test'
def user = 'sa'
def password = ''
def dataSource = new JDBCDataSource(
  database: url,
  user: user,
  password: password
)
def sql = new Sql(dataSource)
assert sql != null

// creating tables
sql.execute '''
  CREATE TABLE Author (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY,
    firstname   VARCHAR(64),
    lastname    VARCHAR(64)
  );
'''

// inserting data
def insertSql = 'INSERT INTO Author (firstname, lastname) VALUES (?,?)'
def params = ['Jon', 'Skeet']
def id = sql.executeInsert insertSql, params
assert id[0] == [0]
id = sql.executeInsert insertSql, ['Ada', 'Wang']
assert id[0] == [1]


// querying data
sql.query('SELECT firstname,lastname FROM Author') { rs ->
  while (rs.next()) {
    def firstname = rs.getString(1)
    def lastname = rs.getString('lastname')
    println("$firstname $lastname")
  }
}
// using eachRow
sql.eachRow('SELECT firstname,lastname FROM Author') { row ->
  println("${row[0]} ${row.lastname}")
}

// using rows
def rows = sql.rows('SELECT firstname,lastname FROM Author')
assert rows.size() == 2

// using firstRow
def firstRow = sql.firstRow('SELECT firstname,lastname FROM Author')
assert firstRow.values().join(' ') == 'Jon Skeet'

// update rows
def updateSql = 'update author set firstname=? where firstname=?'
def updateCount = sql.executeUpdate(updateSql, ['John', 'Jon'])
assert updateCount == 1

// deleting rows
assert sql.firstRow('select count(*) as num from author').num == 2
sql.executeUpdate('delete from author where firstname=?', 'John')
assert sql.firstRow('select count(*) as num from author').num == 1

// transactions
def rowsBefore = sql.firstRow('SELECT count(*) AS num FROM author').num
try {
  sql.withTransaction {
    // right statement
    sql.executeInsert("INSERT INTO author(firstname,lastname) VALUES('wang','5')")
    // wrong statement raising exceptions
    sql.executeInsert("INSERT INTO author() VALUES(4324,3423)")
  }
} catch (ignore) {
  println(ignore.message)
}
def rowsAfter = sql.firstRow('SELECT count(*) AS num FROM author').num
assert rowsBefore == rowsAfter

// batch
def preparedStatement = 'insert into author(firstname,lastname) values(?,?)'
sql.withBatch(10, preparedStatement) {
  it.addBatch('nana', 'li')
  it.addBatch('lily', 'Smith')
  it.addBatch('王', '五')
  it.addBatch('赵', '六')
  it.addBatch('孙', '悟空')
  it.addBatch('猪', '八戒')
  it.addBatch('玄', '奘')
  it.addBatch('沙', '僧')
}
assert sql.firstRow('SELECT count(*) AS num FROM author').num == 9

// pagination
def query = 'select * from author'
def rowsPerPage = 4
def totalRows = sql.firstRow('SELECT count(*) AS num FROM author').num
def totalPage = Math.ceilDiv(totalRows, rowsPerPage) as int
(0..<totalPage).each { offset ->
  sql.rows(query, offset * rowsPerPage, rowsPerPage).each { r ->
    println(r.values().join(' '))
  }
}
// finally close database
sql.close()
